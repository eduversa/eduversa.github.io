// import Head from "next/head";
// import Link from "next/link";

// export default function Home() {
//   return (
//     <>
//       <Head>
//         <title>Home</title>
//         <meta name="description" content="Generated by create next app" />
//         <meta name="viewport" content="width=device-width, initial-scale=1" />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>
//       <main className="flex flex-col h-screen justify-center items-center">
//         <div className="flex flex-col lg:flex-row">
//           <Link
//             href={`/admin/scanner/scan`}
//             className=" bg-red-200 m-4 text-4xl rounded-md px-4 py-2 hover:bg-blue-400"
//           >
//             QR Scan
//           </Link>
//           <Link
//             href={`/admin/scanner/generate`}
//             className=" bg-orange-200 m-4 text-4xl rounded-md px-4 py-2 hover:bg-green-400"
//           >
//             QR Genarate
//           </Link>
//         </div>
//       </main>
//     </>
//   );
// }

import { Fragment, useEffect, useRef, useState } from "react";

// Styles
// import "./QrStyles.css";

// Qr Scanner
import QrScanner from "qr-scanner";
import { AdminLayout } from "@/layout";
import Head from "next/head";
// import QrFrame from "../assets/qr-frame.svg";

const QrReader = () => {
  // QR States
  const scanner = useRef();
  const videoEl = useRef(null);
  const qrBoxEl = useRef(null);
  const [qrOn, setQrOn] = useState(true);

  // Result
  const [scannedResult, setScannedResult] = useState(undefined);

  const hideResultScreen = () => {
    scanner?.current
      ?.start()
      .then(() => setQrOn(true))
      .catch((err) => {
        if (err) setQrOn(false);
      });
    setScannedResult(undefined);
  };

  const handleOK = async (data) => {
    // alert("akjckckq");
    const apiURL = "https://eduversa-api.onrender.com";
    const response = await fetch(`${apiURL}/scanner/process`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        type: "security_token",
        data: {
          security_token:
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiMTIwMjQwMDYzMjUiLCJ0eXBlIjoic3R1ZGVudCIsImlhdCI6MTcxMjQwMDU0OX0.rquS7vd32BPYuSaZIG8NRkMka1Dzb9DIJBkzSZKWqac",
          accessLevel: "4",
        },
      }),
    });
    const res = await response.json();

    // if (!videoEl?.current) {
    scanner.current.stop();
    // }
    setScannedResult(JSON.stringify(res));

    // alert("done");
  };

  // Success
  const onScanSuccess = async (result) => {
    console.log(result);
    await handleOK(result?.data);
  };

  const onScanFail = (err) => {
    console.log(err);
  };

  useEffect(() => {
    if (videoEl?.current && !scanner.current) {
      // 👉 Instantiate the QR Scanner
      scanner.current = new QrScanner(videoEl?.current, onScanSuccess, {
        onDecodeError: onScanFail,
        // 📷 This is the camera facing mode. In mobile devices, "environment" means back camera and "user" means front camera.
        preferredCamera: "environment",
        // 🖼 This will help us position our "QrFrame.svg" so that user can only scan when qr code is put in between our QrFrame.svg.
        highlightScanRegion: true,
        // 🔥 This will produce a yellow (default color) outline around the qr code that we scan, showing a proof that our qr-scanner is scanning that qr code.
        highlightCodeOutline: true,
        // 📦 A custom div which will pair with "highlightScanRegion" option above 👆. This gives us full control over our scan region.
        overlay: qrBoxEl?.current || undefined,
      });

      // 🚀 Start QR Scanner
      scanner?.current
        ?.start()
        .then(() => setQrOn(true))
        .catch((err) => {
          if (err) setQrOn(false);
        });
    }

    // 🧹 Clean up on unmount.
    // 🚨 This removes the QR Scanner from rendering and using camera when it is closed or removed from the UI.
    return () => {
      if (!videoEl?.current) {
        scanner?.current?.stop();
      }
    };
  }, [onScanSuccess]);

  // ❌ If "camera" is not allowed in browser permissions, show an alert.
  useEffect(() => {
    if (!qrOn)
      alert(
        "Camera is blocked or not accessible. Please allow camera in your browser permissions and Reload."
      );
  }, [qrOn]);

  return (
    <Fragment>
      <Head></Head>
      <AdminLayout>
        <div className="qr-reader">
          {/* QR */}
          <video ref={videoEl}></video>
          {/* <div ref={qrBoxEl} className="qr-box">
        <img
          src={QrFrame}
          alt="Qr Frame"
          width={256}
          height={256}
          className="qr-frame"
        />
      </div> */}

          {/* Show Data Result if scan is success */}
          {scannedResult && (
            <div className="scanner__result">
              <button className="btn" onClick={hideResultScreen}>
                hide
              </button>
              <p>Scanned Result: {scannedResult}</p>
            </div>
          )}
        </div>
      </AdminLayout>
    </Fragment>
  );
};

export default QrReader;
